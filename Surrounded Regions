public class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        
        int row = board.length;
        int col = board[0].length;
        Queue<Integer> rowQueue = new LinkedList<Integer>();
        Queue<Integer> colQueue = new LinkedList<Integer>();
        
        for (int i = 0; i < row; i++) {
            if (board[i][0] == 'O') {
                rowQueue.offer(i);
                colQueue.offer(0);
            }
            if (board[i][col - 1] == 'O') {
                rowQueue.offer(i);
                colQueue.offer(col - 1);
            }            
        }
        
        for (int i = 0; i < col; i++) {
            if (board[0][i] == 'O') {
                rowQueue.offer(0);
                colQueue.offer(i);
            }
            if (board[row - 1][i] == 'O') {
                rowQueue.offer(row - 1);
                colQueue.offer(i);
            }            
        }        
        
        while (!rowQueue.isEmpty()) {
            int i = rowQueue.poll();
            int j = colQueue.poll();
            
            board[i][j] = 'Y';
            
            if (i > 0 && board[i - 1][j] == 'O') {
                rowQueue.offer(i - 1);
                colQueue.offer(j);
            }
            
            if (i < row - 1 && board[i + 1][j] == 'O') {
                rowQueue.offer(i + 1);
                colQueue.offer(j);
            }
            
            if (j > 0 && board[i][j - 1] == 'O') {
                rowQueue.offer(i);
                colQueue.offer(j - 1);
            }
            
            if (j < col - 1 && board[i][j + 1] == 'O') {
                rowQueue.offer(i);
                colQueue.offer(j + 1);
            }
            
        }
        
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                else if (board[i][j] == 'Y') {
                    board[i][j] = 'O';
                }
            }
        }
        
        return;
    }
    
    
    
}
